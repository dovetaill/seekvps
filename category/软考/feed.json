{
    "version": "https://jsonfeed.org/version/1",
    "title": "VPS探索者 • All posts by \"软考\" category",
    "description": "",
    "home_page_url": "http://www.seekvps.com",
    "items": [
        {
            "id": "http://www.seekvps.com/2023/09/26/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E6%97%A0%E8%84%91%E6%9A%B4%E5%8A%9B%E8%A7%A3%E9%A2%98%E6%B3%95%EF%BC%8C%E5%82%BB%E7%93%9C%E4%B9%9F%E8%83%BD%E4%BD%9C%E5%AF%B9/",
            "url": "http://www.seekvps.com/2023/09/26/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E6%97%A0%E8%84%91%E6%9A%B4%E5%8A%9B%E8%A7%A3%E9%A2%98%E6%B3%95%EF%BC%8C%E5%82%BB%E7%93%9C%E4%B9%9F%E8%83%BD%E4%BD%9C%E5%AF%B9/",
            "title": "银行家算法无脑暴力解题法，傻瓜也能作对",
            "date_published": "2023-09-26T14:30:44.000Z",
            "content_html": "<h1 id=\"原理讲解\"><a href=\"#原理讲解\" class=\"headerlink\" title=\"原理讲解\"></a>原理讲解</h1><p>非剥夺资源的竞争和进程的不恰当推进顺序会导致死锁，而银行家算法就是为了解决死锁问题——避免死锁。</p>\n<p>银行家算法：当一个进程申请使用资源的时候，银行家算法通过先 试探 分配给该进程资源，然后通过安全性算法判断分配后的系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待。</p>\n<p>那么此时会有一个问题，如何判断系统是否处于安全状态？算法流程将用下面一张图来表示。</p>\n<p>首先是银行家算法中的进程</p>\n<ul>\n<li><p>包含进程Pi的需求资源数量（也是最大需求资源数量，MAX）</p>\n</li>\n<li><p>已分配给该进程的资源A（Allocation）</p>\n</li>\n<li><p>还需要的资源数量N（Need&#x3D;M-A）</p>\n</li>\n</ul>\n<p>Available为空闲资源数量，即资源池（注意：资源池的剩余资源数量+已分配给所有进程的资源数量&#x3D;系统中的资源总量）</p>\n<p>假设资源P1申请资源，银行家算法先试探的分配给它（当然先要看看当前资源池中的资源数量够不够），若申请的资源数量小于等于Available，然后接着判断分配给P1后剩余的资源，能不能使进程队列的某个进程执行完毕，若没有进程可执行完毕，则系统处于不安全状态（即此时没有一个进程能够完成并释放资源，随时间推移，系统终将处于死锁状态）。</p>\n<h2 id=\"若有进程可执行完毕，则假设回收已分配给它的资源（剩余资源数量增加），把这个进程标记为可完成，并继续判断队列中的其它进程，若所有进程都可执行完毕，则系统处于安全状态，并根据可完成进程的分配顺序生成安全序列（如-P0，P3，P2，P1-表示将申请后的剩余资源Work先分配给P0–-回收（Work-已分配给P0的A0-Work）–-分配给P3–-回收（Work-A3-Work）–-分配给P2–-······满足所有进程），如此就可避免系统存在潜在死锁的风险。\"><a href=\"#若有进程可执行完毕，则假设回收已分配给它的资源（剩余资源数量增加），把这个进程标记为可完成，并继续判断队列中的其它进程，若所有进程都可执行完毕，则系统处于安全状态，并根据可完成进程的分配顺序生成安全序列（如-P0，P3，P2，P1-表示将申请后的剩余资源Work先分配给P0–-回收（Work-已分配给P0的A0-Work）–-分配给P3–-回收（Work-A3-Work）–-分配给P2–-······满足所有进程），如此就可避免系统存在潜在死锁的风险。\" class=\"headerlink\" title=\"若有进程可执行完毕，则假设回收已分配给它的资源（剩余资源数量增加），把这个进程标记为可完成，并继续判断队列中的其它进程，若所有进程都可执行完毕，则系统处于安全状态，并根据可完成进程的分配顺序生成安全序列（如{P0，P3，P2，P1}表示将申请后的剩余资源Work先分配给P0–&gt;回收（Work+已分配给P0的A0&#x3D;Work）–&gt;分配给P3–&gt;回收（Work+A3&#x3D;Work）–&gt;分配给P2–&gt;······满足所有进程），如此就可避免系统存在潜在死锁的风险。\"></a>若有进程可执行完毕，则假设回收已分配给它的资源（剩余资源数量增加），把这个进程标记为可完成，并继续判断队列中的其它进程，若所有进程都可执行完毕，则系统处于安全状态，并根据可完成进程的分配顺序生成安全序列（如{P0，P3，P2，P1}表示将申请后的剩余资源Work先分配给P0–&gt;回收（Work+已分配给P0的A0&#x3D;Work）–&gt;分配给P3–&gt;回收（Work+A3&#x3D;Work）–&gt;分配给P2–&gt;······满足所有进程），如此就可避免系统存在潜在死锁的风险。</h2><p><img src=\"https://hub.91imgs.com/i/2023/09/26/6512e88c070d1.webp\"></p>\n<h1 id=\"暴力解题\"><a href=\"#暴力解题\" class=\"headerlink\" title=\"暴力解题\"></a>暴力解题</h1><h2 id=\"实战题目\"><a href=\"#实战题目\" class=\"headerlink\" title=\"实战题目\"></a>实战题目</h2><p><img src=\"https://hub.91imgs.com/i/2023/09/26/6512e63473d5e.jpg\"></p>\n<h2 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h2><p>先不管那些定义，首先算出来以下矩阵：</p>\n<p>9-1-2-2-1-1 &#x3D; 2</p>\n<p>8-2-1-1-2-1 &#x3D; 1</p>\n<p>5-1-1-0-0-3 &#x3D; 0</p>\n<p>即矩阵|210|</p>\n<p> 接着会有如下矩阵运算</p>\n<p>6  5  2<br>2  2  1<br>8  1  1<br>1  2  1<br>3  4  4</p>\n<p>减去</p>\n<p>1  2  1<br>2  1  1<br>2  1  0<br>1  2  0<br>1  1  3</p>\n<p>&#x3D;</p>\n<p>5  3  1<br>0  1  0<br>6  0  1<br>0  0  1<br>2  3  1</p>\n<p>所以从B,C中选择，选择P2释放已分配资源于是 |210| + |211| &#x3D; |321|<br>所以排除了C</p>\n",
            "tags": [
                "软考"
            ]
        }
    ]
}